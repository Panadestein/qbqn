# -*- eval: (face-remap-add-relative 'default '(:family "BQN386 Unicode" :height 180)); -*-
#+TITLE: BQN's Quantum Noise
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/style.css"/>

** Preamble

We will implement and test a compact quantum interpreter in the BQN programming language.
Initially, we import the necessary system functions and define a 1-modifier for handling
complex matrix products. Next, we define a namespace containing various quantum gates:

#+name: preamble
#+begin_src bqn :exports code :results none :tangle ./perf/q.bqn
  Sin‿Cos‿GCD ← •math
  U ← •rand.Range
  _cp ← {(-´𝔽¨)⋈(+´𝔽¨)⟜⌽}
    
  g ← {
    IM ← (⊢⋈≢⥊⟜0⊢)¨
    x‿id‿h ⇐ (⌽‿⊢{𝕎𝕩}¨<=⌜˜↕2) ∾○IM <-⌾(1‿1⊸⊑)2‿2⥊÷√2
    swap‿cnot ⇐ IM ⟨1‿2, 2‿3⟩ {⌽⌾(𝕨⊸⊏)𝕩}¨ <=⌜˜↕4
    P ⇐ 3‿3⊸⊑{sm‿cm ← 𝕩⌾𝔽¨ ⟨=⌜˜↕4,  4‿4⥊0⟩ ⋄ ⟨Sin⌾𝔽 sm, Cos⌾𝔽 cm⟩}
  }
#+end_src

** Interpreter

The (call_count-chars() chars) quantum interpreter is based on references [[https://arxiv.org/abs/1711.02086][arXiv:1711.02086]]
and [[https://arxiv.org/abs/1608.03355][arXiv:1608.03355]]. For simplicity, we always measure at the end of the execution:

#+name: interpreter
#+begin_src bqn :exports code :results none :tangle ./perf/q.bqn
  Q ← {𝕊qb‿sc‿rnd:
    psi ← {(1⌾⊑⋈⊢)𝕩⥊0} 2⋆qb
    M‿K‿D ← ⟨+˝∘×⎉1‿∞ _cp, {1≡𝕩 ? 𝕨; 1≡𝕨 ? 𝕩; 𝕨(∾⊣×·<⊢)_cp𝕩}, {⌊2⋆⁼≠⊑𝕩}⟩
    L ← {E ← {0=𝕨 ? 1; K⍟(𝕨-1)˜ 𝕩} ⋄ K´ ⟨(qb-𝕨+D𝕩) E g.id, 𝕩, 𝕨 E g.id⟩}
    T ← ∾↕∘≠{a←𝕩 ⋄ i←𝕨{𝕩⊑a}•_while_{𝕩<𝕨}𝕨⊑a ⋄ 𝕨<◶⟨⟩‿{(⊢∾1⊸↓∘⌽)𝕨+↕𝕩-𝕨}i}¨<
    A ← {qs‿gs𝕊v:
      1⊸=◶{𝕊𝕩:
        ui‿pt ← ⟨0 L gs, T qs (⌽∘⊢∾¬∘∊/⊣)˜ ↕qb⟩
        v M˜ {0=≠𝕩 ? ui; {𝕩 M (ui M 𝕨)}´ (M˜´⋈M´) {𝕩 L g.swap}¨ 𝕩} pt
      }‿(v M˜ gs L˜ ⊑qs) ≠qs}
    »⊸<∨` 0> rnd -` >+○(×˜)˝ psi A´ ⌽sc
  }
#+end_src

** Shor's algorithm

As a test case, we employ the quantum circuit of Shor's algorithm
for the number fifteen and base eleven, following references
[[https://arxiv.org/abs/1804.03719][arXiv:1804.03719]] and [[https://arxiv.org/abs/2306.09122][arXiv:2306.09122]]. The resulting compiled circuit
uses five qubits, three of which serve as control. To enhance
statistical accuracy, the experiment is repeated multiple times.
Additionally, we define a classical post-processing function:

#+name: test
#+begin_src bqn :exports code :results none :tangle ./perf/q.bqn
  n‿a‿qb‿r ← ⟨15, 11, 5, 0 U˜ 2⋆3⟩

  sc ← ⟨
    ⟨0⟩‿g.h ⋄ ⟨1⟩‿g.h ⋄ ⟨2⟩‿g.h
    ⟨2, 3⟩‿g.cnot ⋄ ⟨2, 4⟩‿g.cnot ⋄ ⟨1⟩‿g.h
    ⟨⟨1, 0⟩, g.P π÷2⟩ ⋄ ⟨0⟩‿g.h
    ⟨⟨1, 2⟩, g.P π÷4⟩ ⋄ ⟨⟨0, 2⟩, g.P π÷2⟩ ⋄ ⟨2⟩‿g.h
  ⟩

  C ← {n (⊣≡×´∘GCD) +‿-{𝕩𝕎1}¨ <a⋆(≠÷2×⊑∘⍒) 0⌾⊑+˝∘‿(2⋆qb-2)⥊𝕩}
#+end_src

Wir müssen wissen, wir werden wissen!

#+name: run
#+begin_src bqn :exports both :tangle ./perf/q.bqn
  C >+˝{Q qb‿sc‿𝕩}¨ r
#+end_src

#+RESULTS: run
: 1

Compare the result with that from a real [[./ibm_eagle/shor_factorize_fifteen.html][quantum computer]].

** Epilogue

Why BQN, you may ask? Its tacit and functional style together with its support
for numerous combinators, which makes programming feel like solving a fun algebraic problem
rather than drafting a manifesto. Try running the simulation in
the call_generate-bqn-link() and explore it! While the interpreter is not
particularly optimized, here is a comparison with Common Lisp for those who are curious:

#+begin_export html
<details>
<summary>CBQN vs SBCL</summary>
#+end_export

#+begin_src bash :exports results :tangle no :results raw :wrap example
  hyperfine --runs 5 'cbqn -f ./perf/q.bqn' 'sbcl --script ./perf/q.lisp'
#+end_src

#+RESULTS:
#+begin_example
Benchmark 1: cbqn -f ./perf/q.bqn
  Time (mean ± σ):      65.3 ms ±  42.2 ms    [User: 63.7 ms, System: 1.4 ms]
  Range (min … max):    43.8 ms … 140.6 ms    5 runs
 
Benchmark 2: sbcl --script ./perf/q.lisp
  Time (mean ± σ):      9.231 s ±  0.096 s    [User: 9.289 s, System: 0.091 s]
  Range (min … max):    9.076 s …  9.339 s    5 runs
 
Summary
  cbqn -f ./perf/q.bqn ran
  141.25 ± 91.26 times faster than sbcl --script ./perf/q.lisp
#+end_example

#+begin_export html
</details>
#+end_export

The title of this post doesn't have a particular meaning, it's only a recursive acronym that appears to be on-topic.
The full source code is hosted in a GitHub [[https://github.com/Panadestein/qbqn][repository]].

#+name: generate-bqn-link
#+begin_src emacs-lisp :noweb yes :noweb-prefix no :exports none :results raw :tangle no
  (let* ((bqn-code (concat "<<preamble>>\n\n" "<<interpreter>>\n\n" "<<test>>\n\n" "<<run>>"))
         (encoded (base64-encode-string (encode-coding-string bqn-code 'utf-8) t)))
    (concat "[[https://mlochbaum.github.io/BQN/try.html#code=" encoded "][BQN repl]]"))
#+end_src

#+name: count-chars
#+begin_src emacs-lisp :noweb yes :noweb-prefix no :exports none :results raw :tangle no
  (- (length "<<interpreter>>") 4)
#+end_src

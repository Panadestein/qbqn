# -*- eval: (face-remap-add-relative 'default '(:family "BQN386 Unicode" :height 180)); -*-
#+TITLE: A quantum interpreter in BQN
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/style.css"/>

** Preamble

We start by importing some required system functions, defining some utilities to work with complex numbers,
and a namespace with the required quantum gates:

#+name: preamble
#+begin_src bqn :exports code :results none
  Sin‿Cos‿GCD ← •math
  U ← •rand.Range
    
  g ← {
    id‿x⇐⌽‿⊢ {𝕎𝕩}¨ <=⌜˜↕2, h⇐-⌾(1‿1⊸⊑)2‿2⥊÷√2
    swap‿cnot⇐⟨1‿2, 2‿3⟩ {⌽⌾(𝕨⊸⊏)𝕩}¨ <=⌜˜↕4
    P⇐3‿3⊸⊑{(Sin⌾𝔽⋈Cos⌾𝔽) 𝕩⌾𝔽 =⌜˜↕4}
  }
#+end_src

** Interpreter

The (100 chars) quantum interpreter is based on references [[https://arxiv.org/abs/1711.02086][arXiv:1711.02086]] and [[https://arxiv.org/abs/1608.03355][arXiv:1608.03355]]:

#+name: interpreter
#+begin_src bqn :exports code :results none
  Q ← {𝕨𝕊qt‿qc‿s:
    𝕨+qc
  }
#+end_src

** Shor's algorithm

As a test case, we employ the quantum circuit of Shor's algorithm
for the number fifteen and base eleven, following references
[[https://arxiv.org/abs/1804.03719][arXiv:1804.03719]] and [[https://arxiv.org/abs/2306.09122][arXiv:2306.09122]]. The resulting compiled circuit
uses five qubits, three of them are control ones. We also define a classical
post-processing function:

#+name: test
#+begin_src bqn :exports code :results none
  n‿a‿qt‿qc‿k ← ⟨15, 11, 5, 3, 2⋆10⟩

  s ← ⟨
    ⟨0⟩‿g.h ⋄ ⟨1⟩‿g.h ⋄ ⟨2⟩‿g.h
    ⟨2, 3⟩‿g.cnot ⋄ ⟨2, 4⟩‿g.cnot ⋄ ⟨1⟩‿g.h
    ⟨⟨1, 0⟩, g.P π÷2⟩ ⋄ ⟨0⟩‿g.h
    ⟨⟨1, 2⟩, g.P π÷4⟩ ⋄ ⟨⟨0, 2⟩, g.P π÷2⟩ ⋄ ⟨2⟩‿g.h
  ⟩

  C ← {+‿-{n GCD 𝕩𝕎1}¨ a⋆ (≠÷2×⊑∘⍒) 0⌾⊑+˝∘‿(2⋆qc)⥊𝕩}
#+end_src

Wir müssen wissen, wir werden wissen!

#+name: run
#+begin_src bqn
  k C∘Q qt‿qc‿s
#+end_src

The simulation can be run in the call_generate-bqn-link(), and the results can be
compared with those from a real [[./ibm_eagle/shor_factorize_fifteen.html][quantum computer]]. The complete source code is available in
a GitHub [[https://github.com/Panadestein/bqun][repository]]. 

#+name: generate-bqn-link
#+begin_src emacs-lisp :noweb yes :noweb-prefix no :exports none :results raw
  (let* ((bqn-code (concat "<<preamble>>\n\n" "<<interpreter>>\n\n" "<<test>>\n\n" "<<run>>"))
         (encoded (base64-encode-string (encode-coding-string bqn-code 'utf-8) t)))
    (concat "[[https://mlochbaum.github.io/BQN/try.html#code=" encoded "][BQN repl]]"))
#+end_src

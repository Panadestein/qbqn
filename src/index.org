# -*- eval: (face-remap-add-relative 'default '(:family "BQN386 Unicode" :height 180)); -*-
#+TITLE: A quantum interpreter in BQN
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/style.css"/>

We define a quantum interpreter based on references [[https://arxiv.org/abs/1711.02086][arXiv:1711.02086]] and [[https://arxiv.org/abs/1608.03355][arXiv:1608.03355]]:

#+name: qbqn-block
#+begin_src bqn :exports code
  qbqn ← {psi⇐0}
#+end_src

To test it, we employ the quantum circuit of Shor's algorithm for src_bqn[:exports code]{n‿a ← ⟨15, 11⟩},
following references [[https://arxiv.org/abs/1804.03719][arXiv:1804.03719]] and [[https://arxiv.org/abs/2306.09122][arXiv:2306.09122]]:

#+name: shor-block
#+begin_src bqn
  shor ← {
    n⇐15
    a⇐11
  }
#+end_src

The simulation can be run in the call_generate-bqn-link(), and the results can be
compared with those from a real [[ibm_eagle/shor_factorize_fifteen.html][quantum computer]]. The complete source code is available in
a GitHub [[https://github.com/Panadestein/bqun][repository]].

#+name: generate-bqn-link
#+begin_src emacs-lisp :noweb yes :noweb-prefix no :exports none :results raw
  (let* ((bqn-code (concat "<<qbqn-block>>" "\n" "<<shor-block>>"))
         (encoded (base64-encode-string (encode-coding-string bqn-code 'utf-8) t)))
    (concat "[[https://mlochbaum.github.io/BQN/try.html#code=" encoded "][BQN repl]]"))
#+end_src

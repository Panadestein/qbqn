# -*- eval: (face-remap-add-relative 'default '(:family "BQN386 Unicode" :height 180)); -*-
#+TITLE: A quantum interpreter in BQN
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/style.css"/>

We define a quantum interpreter based on references [[https://arxiv.org/abs/1711.02086][arXiv:1711.02086]] and [[https://arxiv.org/abs/1608.03355][arXiv:1608.03355]]:

#+name: qbqn-block
#+begin_src bqn :exports code
  Sin‿Cos ← •math
  U ← •rand.Range
    
  g ← {
    id‿x⇐⌽‿⊢ {𝕎𝕩}¨ <=⌜˜↕2, h⇐-⌾(1‿1⊸⊑)2‿2⥊÷√2
    swap‿cnot⇐⟨1‿2, 2‿3⟩ {⌽⌾(𝕨⊸⊏)𝕩}¨ <=⌜˜↕4
    P⇐3‿3⊸⊑{(Sin⌾𝔽⋈Cos⌾𝔽) 𝕩⌾𝔽 =⌜˜↕4}
  }

  Q ← {𝕩}
#+end_src

#+RESULTS: qbqn-block
: (function block)

To test it, we employ the quantum circuit of Shor's algorithm for src_bqn[:exports code]{n‿a ← ⟨15, 11⟩},
following references [[https://arxiv.org/abs/1804.03719][arXiv:1804.03719]] and [[https://arxiv.org/abs/2306.09122][arXiv:2306.09122]]:

#+name: shor-block
#+begin_src bqn
  sc ← ⟨
    ⟨0⟩‿g.h
    ⟨1⟩‿g.h
    ⟨2⟩‿g.h
    ⟨2, 3⟩‿g.cnot
    ⟨2, 4⟩‿g.cnot
    ⟨1⟩‿g.h
    ⟨⟨1, 0⟩, g.P π÷2⟩
    ⟨0⟩‿g.h
    ⟨⟨1, 2⟩, g.P π÷4⟩
    ⟨⟨0, 2⟩, g.P π÷2⟩
    ⟨2⟩‿g.h
  ⟩

  C ← {𝕩}
    
  C Q sc
#+end_src

#+RESULTS: shor-block
#+begin_example
┌─
· ┌─                                                   ┌─                                                   ┌─                                                   ┌─                      ┌─                      ┌─                                                   ┌─                                                          ┌─                                                   ┌─                                                                        ┌─                                                          ┌─                                                    
  · ⟨ 0 ⟩ ┌─                                           · ⟨ 1 ⟩ ┌─                                           · ⟨ 2 ⟩ ┌─                                           · ⟨ 2 3 ⟩ ┌─            · ⟨ 2 4 ⟩ ┌─            · ⟨ 1 ⟩ ┌─                                           · ⟨ 1 0 ⟩ ┌─                                                · ⟨ 0 ⟩ ┌─                                           · ⟨ 1 2 ⟩ ┌─                                                              · ⟨ 0 2 ⟩ ┌─                                                · ⟨ 2 ⟩ ┌─                                            
          ╵ 0.7071067811865475  0.7071067811865475             ╵ 0.7071067811865475  0.7071067811865475             ╵ 0.7071067811865475  0.7071067811865475               ╵ 1 0 0 0               ╵ 1 0 0 0             ╵ 0.7071067811865475  0.7071067811865475               · ┌─          ┌─                                          ╵ 0.7071067811865475  0.7071067811865475               · ┌─                           ┌─                                         · ┌─          ┌─                                          ╵ 0.7071067811865475  0.7071067811865475      
            0.7071067811865475 ¯0.7071067811865475               0.7071067811865475 ¯0.7071067811865475               0.7071067811865475 ¯0.7071067811865475                 0 1 0 0                 0 1 0 0               0.7071067811865475 ¯0.7071067811865475                 ╵ 1 0 0 0   ╵ 1 0 0                     0                 0.7071067811865475 ¯0.7071067811865475                 ╵ 1 0 0                  0   ╵ 1 0 0                  0                   ╵ 1 0 0 0   ╵ 1 0 0                     0                 0.7071067811865475 ¯0.7071067811865475      
                                                   ┘                                                    ┘                                                    ┘               0 0 0 1                 0 0 0 1                                                      ┘                 0 1 0 0     0 1 0                     0                                                        ┘                 0 1 0                  0     0 1 0                  0                     0 1 0 0     0 1 0                     0                                                        ┘    
                                                     ┘                                                    ┘                                                    ┘             0 0 1 0                 0 0 1 0                                                        ┘               0 0 1 0     0 0 1                     0                                                          ┘               0 0 1                  0     0 0 1                  0                     0 0 1 0     0 0 1                     0                                                          ┘  
                                                                                                                                                                                     ┘                       ┘                                                                      0 0 0 1     0 0 0 6.123233995736766e¯17                                                                          0 0 0 0.7071067811865475     0 0 0 0.7071067811865476                     0 0 0 1     0 0 0 6.123233995736766e¯17                                                             
                                                                                                                                                                                       ┘                       ┘                                                                            ┘                               ┘                                                                                                 ┘                            ┘                           ┘                               ┘                                                           
                                                                                                                                                                                                                                                                                                                              ┘                                                                                                                              ┘                                                           ┘                                                         
                                                                                                                                                                                                                                                                                                                                ┘                                                                                                                              ┘                                                           ┘                                                       
┘
#+end_example

The simulation can be run in the call_generate-bqn-link(), and the results can be
compared with those from a real [[./ibm_eagle/shor_factorize_fifteen.html][quantum computer]]. The complete source code is available in
a GitHub [[https://github.com/Panadestein/bqun][repository]].

#+name: generate-bqn-link
#+begin_src emacs-lisp :noweb yes :noweb-prefix no :exports none :results raw
  (let* ((bqn-code (concat "<<qbqn-block>>" "\n" "<<shor-block>>"))
         (encoded (base64-encode-string (encode-coding-string bqn-code 'utf-8) t)))
    (concat "[[https://mlochbaum.github.io/BQN/try.html#code=" encoded "][BQN repl]]"))
#+end_src
